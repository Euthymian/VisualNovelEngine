------------ GENERAL DIALOGUE FORMAT --------------
<CharacterName> "<Dialogue>" <Commands>
if <CharacterName> isnt specified, it will be replaced with the name of the character that is currently speaking.



------------- DIALOGUE SEGMENTATION --------------
Dialogue segmentation: A way to split a single line dialogue into multiple segments. The way we split is by {} with flags

{c} clear -> clear current segment then display new one        | -> wait for player input
{a} append -> append new segment to current one                |
{wc n} wait clear               | -> wait for time (n is amount of seconds)
{wa n} wait append              |

speaker "This is a very long dialogue {c} that will be split {a} into multiple segments." 



------------- SPEAKER CASTING DATA --------------
Speaker name format: speakerName as anotherName at 1:1 [0:Anger, 1:Happy, ...]
-> The speaker name appears on screen with anotherName (if have one) at the specific position with expression on layer

as: anotherName
at: position 
[]: expression



------------- COMMAND HANDLING --------------
Command Parser will extract command from the dialohue line, find that command in command database then retrieve the command data to execute

A command looks like this: PlaySong("This is song name" -v 1 -p 1)
-> args are separated by space, space which inside "" will be ignored

There is a case where we only want to execute the following command after the previous one is done
-> John "Move left then right" [wait]MoveCharDemo(left), MoveCharDemo(right)
[wait] keyword is added to the first command means wait the first command to finish before execute the second



------------- CHARACTER TYPES --------------
Text character: Only for render text on screen, it can store some varibles but no art assets -> A large crowd 
Sprite (sheet) character: A traditional 2d character with sprite
Live 2d character: With animation
3d character: With model



--------------- SPRITE CHARACTER SETUP --------------
- Watch video https://www.youtube.com/watch?v=RcCM4pm5sbA&list=PLGSox0FgA5B58Ki4t4VqAPDycEpmkBd0i&index=17



------------- LIVE2D CHARACTER SETUP --------------
Current setup:
- Becuase we are working with multiple character types (Sprite, Live2D) in the same scene (best practice is having only 1 type) and
  Live2D character is a complex one, so handling Live2D requires some extra steps
  - Create brand new Canvas and Camera to render Live2D character
  - Change canvas type to Camera and assign the new cam
  - Both cameras (main camera and Live2D camera) and canvases should have the same setting (ortographic for cam and distance from cam for canvas) 
  - Create new Layer "UI - Live2D" and assign it to the new canvas
  - Limit culling mask of new camera to only render the "UI - Live2D" layer
  - Assign new layer to Live2D character prefab (Sample prefab)
  - Inside prefab, on CubismRenderController -> Sorting section, set Order in Layer to 1 and Mode to "Back To Front Order" -> This will 
	make Unity render all parts of Live2D char in the order of its parts
  - Create a new CustomRenderTexture to render Live2D character
  - Output of the new camera is assigned to the new CustomRenderTexture
  - In the main render group, inside Characters panel, create a new RawImage and assign the CustomRenderTexture to it